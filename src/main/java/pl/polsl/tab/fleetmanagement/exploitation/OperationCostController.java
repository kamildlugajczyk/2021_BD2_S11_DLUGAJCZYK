package pl.polsl.tab.fleetmanagement.exploitation;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.Authorization;
import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;
import pl.polsl.tab.fleetmanagement.exploitation.type.SimpleOperationCosts;

import java.util.List;

@RestController
@AllArgsConstructor
@RequestMapping(path = "/operations")
@ApiOperation(value = "", authorizations = { @Authorization(value="jwtToken") })
public class OperationCostController {

    private final OperationCostService operationCostService;

    @GetMapping
    public List<OperationCostDto> getOperationsCosts() {
        return operationCostService.getOperationCosts();
    }

    @GetMapping(path = "/{id}")
    public OperationCostDto getOperationCost(@PathVariable Long id) {
        return operationCostService.getOperationCost(id);
    }

    @PostMapping
    public OperationCostDto addOperationCost(@RequestBody SimpleOperationCosts simpleOperationCosts) {
        try {
            return operationCostService.addOperationCost(simpleOperationCosts);
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, e.getMessage(), e);
        }
    }

    @PutMapping("/{id}")
    public OperationCostDto updateOperationCost(@PathVariable Long id, @RequestBody OperationCostDtoRequest operationCostsDTO) {
        try {
            return operationCostService.updateOperationCost(id, operationCostsDTO);
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, e.getMessage(), e);
        }
    }

    @DeleteMapping("/{id}")
    public void deleteOperationCost(@PathVariable Long id) {
        operationCostService.deleteOperationCost(id);
    }
}
