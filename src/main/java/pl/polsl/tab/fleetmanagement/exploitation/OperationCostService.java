package pl.polsl.tab.fleetmanagement.exploitation;

import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;
import pl.polsl.tab.fleetmanagement.exceptions.IdNotFoundException;
import pl.polsl.tab.fleetmanagement.exceptions.NotUniqueException;
import pl.polsl.tab.fleetmanagement.exploitation.type.OperationTypeEntity;
import pl.polsl.tab.fleetmanagement.exploitation.type.OperationTypeRepository;
import pl.polsl.tab.fleetmanagement.rentings.VehicleRentingEntity;
import pl.polsl.tab.fleetmanagement.rentings.VehicleRentingRepository;
import pl.polsl.tab.fleetmanagement.vehicle.VehicleRepository;
import pl.polsl.tab.fleetmanagement.vehicle.VehiclesEntity;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@AllArgsConstructor
public class OperationCostService {

    private final OperationCostRepository operationCostRepository;
    private final VehicleRepository vehicleRepository;
    private final OperationTypeRepository operationTypeRepository;
    private final VehicleRentingRepository vehicleRentingRepository;


    public List<OperationCostDto> getOperationCosts() {

        List<OperationCostDto> operationCostsDTOs = new ArrayList<>();
        List<OperationCostEntity> operationCostsEntities = new ArrayList<>(operationCostRepository.findAll());

        operationCostsEntities.addAll(operationCostRepository.findAll());

        for (OperationCostEntity operationCostEntity : operationCostsEntities) {
            operationCostsDTOs.add(new OperationCostDto(operationCostEntity));
        }
        return operationCostsDTOs;
    }

    public OperationCostDto getOperationCost(Long id) {
        OperationCostEntity operationCostEntity = operationCostRepository.findById(id)
                .orElseThrow(() -> new IdNotFoundException("Operation cost", id));

        return new OperationCostDto(operationCostEntity);
    }

    public OperationCostDto addOperationCost(OperationCostDtoRequest operationCostDtoRequest) {
        VehiclesEntity vehiclesEntity = vehicleRepository.findById(operationCostDtoRequest.getVehicleId())
                .orElseThrow(() -> new IdNotFoundException("Vehicle", operationCostDtoRequest.getVehicleId()));

        OperationTypeEntity operationTypeEntity = operationTypeRepository.findById(operationCostDtoRequest.getOperationTypeId())
                .orElseThrow(() -> new IdNotFoundException("Operation type", operationCostDtoRequest.getVehicleId()));

        VehicleRentingEntity vehicleRentingEntity = vehicleRentingRepository.findById(operationCostDtoRequest.getId())
                .orElseThrow(() -> new IdNotFoundException("Vehicle renting", operationCostDtoRequest.getVehicleId()));


        try {
            OperationCostEntity operationCostEntity = operationCostRepository.save(new OperationCostEntity(
                    operationCostDtoRequest.getDate(),
                    operationCostDtoRequest.getPrice(),
                    operationCostDtoRequest.getDescription(),
                    operationCostDtoRequest.getVehicleId(),
                    operationCostDtoRequest.getOperationTypeId(),
                    operationCostDtoRequest.getVehicleRentingId(),
                    operationCostDtoRequest.getKeepingId()));
            return new OperationCostDto(operationCostEntity);
        } catch (RuntimeException e) {
            Throwable rootCause = com.google.common.base.Throwables.getRootCause(e);
            if (rootCause instanceof SQLException) {
                if ("23505".equals(((SQLException) rootCause).getSQLState())) {
                    // TODO add unique annotation in database script
                    throw new NotUniqueException("Operation cost", "id", operationCostDtoRequest.getId().toString());
                }
            }
            throw new RuntimeException(e);
        }
    }

    public OperationCostDto updateOperationCost(Long id, OperationCostDtoRequest operationCostDtoRequest) {

        Optional<OperationCostEntity> operationCostEntity = operationCostRepository.findById(id);

        VehiclesEntity vehiclesEntity = vehicleRepository.findById(operationCostDtoRequest.getVehicleId())
                .orElseThrow(() -> new IdNotFoundException("Vehicle", operationCostDtoRequest.getVehicleId()));

        OperationTypeEntity operationTypeEntity = operationTypeRepository.findById(operationCostDtoRequest.getOperationTypeId())
                .orElseThrow(() -> new IdNotFoundException("Operation type", operationCostDtoRequest.getVehicleId()));

        VehicleRentingEntity vehicleRentingEntity = vehicleRentingRepository.findById(operationCostDtoRequest.getId())
                .orElseThrow(() -> new IdNotFoundException("Vehicle rentings", operationCostDtoRequest.getVehicleId()));


        try {
            operationCostEntity.get().setDate(operationCostDtoRequest.getDate());
            operationCostEntity.get().setPrice(operationCostDtoRequest.getPrice());
            operationCostEntity.get().setDescription(operationCostDtoRequest.getDescription());
            operationCostEntity.get().setVehiclesId((int)operationCostDtoRequest.getVehicleId());
            operationCostEntity.get().setOperationTypeId((int)operationCostDtoRequest.getOperationTypeId());
            operationCostEntity.get().setVehicleRentingsId((int)operationCostDtoRequest.getVehicleRentingId());
            operationCostEntity.get().setKeepingId(operationCostDtoRequest.getKeepingId());
            return new OperationCostDto(operationCostRepository.save(operationCostEntity.get()));
        } catch (RuntimeException e) {
            Throwable rootCause = com.google.common.base.Throwables.getRootCause(e);
            if (rootCause instanceof SQLException) {
                if ("23505".equals(((SQLException) rootCause).getSQLState())) {
                    // TODO add unique annotation in database script
                    throw new NotUniqueException("Operation cost", "id", operationCostDtoRequest.getId().toString());
                }
            }
            throw new RuntimeException(e);
        }
    }

    public void deleteOperationCost(Long id) {
        try {
            operationCostRepository.deleteById(id);
        } catch (IdNotFoundException e) {
            System.out.println(e.getMessage());
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage(), e);
        }
    }
}
