package pl.polsl.tab.fleetmanagement.exploitation.type;

import com.google.common.base.Throwables;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import pl.polsl.tab.fleetmanagement.exceptions.IdNotFoundException;
import pl.polsl.tab.fleetmanagement.exceptions.NotUniqueException;
import pl.polsl.tab.fleetmanagement.exploitation.OperationCostDto;
import pl.polsl.tab.fleetmanagement.other.PostValue;
import pl.polsl.tab.fleetmanagement.vehicle.type.TypeDTO;
import pl.polsl.tab.fleetmanagement.vehicle.type.TypeEntity;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@AllArgsConstructor
public class OperationTypeService {

    private final OperationTypeRepository operationTypeRepository;

    public List<OperationTypeDTO> getOperationTypes() {

        List<OperationTypeDTO> operationTypeDTOs = new ArrayList<>();
        List<OperationTypeEntity> operationTypeEntities = new ArrayList<>();

        operationTypeRepository.findAll().forEach(operationTypeEntities::add);

        for (OperationTypeEntity operationTypeEntity : operationTypeEntities) {
            operationTypeDTOs.add(new OperationTypeDTO(operationTypeEntity));
        }

        return operationTypeDTOs;
    }

    public OperationTypeDTO getOperationType(Long id){
        OperationTypeEntity operationTypeEntity = this.operationTypeRepository.findById(id)
                .orElseThrow(() -> new IdNotFoundException("Operation Type", id));

        return new OperationTypeDTO(operationTypeEntity);
    }

    public OperationTypeDTO addOperationType(PostValue<String> operation){
        if (validateName(operation.getName()))
            throw new IllegalArgumentException("The name '" + operation.getName() + "' is not appropriate");

        if (ifNameTaken(StringUtils.capitalize(operation.getName())))
            throw new IllegalArgumentException("Operation type with '" + operation.getName() + "' name already exists");
        try {
            OperationTypeEntity operationTypeEntity = operationTypeRepository.save(new OperationTypeEntity(StringUtils.capitalize(operation.getName())));
            return new OperationTypeDTO(operationTypeEntity);
        } catch (RuntimeException e) {
            Throwable rootCause = Throwables.getRootCause(e);
            if (rootCause instanceof SQLException) {
                if ("23505".equals(((SQLException) rootCause).getSQLState())) {
                    throw new NotUniqueException("Operation type", "name", operation.getName());
                }
            }
            throw new RuntimeException(e);
        }
    }

    public OperationTypeDTO updateOperationType(Long id, PostValue<String> operation){
        Optional<OperationTypeEntity> operationTypeEntity = operationTypeRepository.findById(id);

        if (operationTypeEntity.isEmpty())
            throw new IdNotFoundException("Operation", id);

        if (validateName(operation.getName()))
            throw new IllegalArgumentException("The name '" + operation.getName() + "' is not appropriate");

        if (ifNameTaken(operation.getName()))
            throw new IllegalArgumentException("Status with '" + operation.getName() + "' name already exists");


        try {
            operationTypeEntity.get().setName(StringUtils.capitalize(operation.getName()));
            OperationTypeEntity o = this.operationTypeRepository.save(operationTypeEntity.get());
            return new OperationTypeDTO(o);
        } catch (RuntimeException e) {
            Throwable rootCause = com.google.common.base.Throwables.getRootCause(e);
            if (rootCause instanceof SQLException) {
                if ("23505".equals(((SQLException) rootCause).getSQLState())) {
                    throw new NotUniqueException("Status", "name", StringUtils.capitalize(operation.getName()));
                }
            }
            throw new RuntimeException(e);
        }
    }

    public void deleteOperationType(Long id) {
        try {
            this.operationTypeRepository.deleteById(id);
        } catch (RuntimeException ignored) {
            throw new IdNotFoundException("Status", id);
        }
    }

    public boolean ifNameTaken(java.lang.String name) {
        Optional<OperationTypeEntity> foundByName = operationTypeRepository.findStatusEntityByName(StringUtils.capitalize(name));
        return foundByName.isPresent();
    }

    // TODO: 25.05.2021 I CAN ADD A NAME VALIDATOR CLASS OR STH
    public boolean validateName(java.lang.String name) {
        return name == null || name.length() <= 0 || name.length() > 50 || !onlyLettersSpaces(name);
    }

    public static boolean onlyLettersSpaces(java.lang.String s) {
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if (Character.isLetter(ch) || ch == ' ') {
                continue;
            }
            return false;
        }
        return s.charAt(s.length() - 1) != ' ';
    }
}
