package pl.polsl.tab.fleetmanagement.exploitation.type;

import com.google.common.base.Throwables;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import pl.polsl.tab.fleetmanagement.exceptions.IdNotFoundException;
import pl.polsl.tab.fleetmanagement.exceptions.NotUniqueException;

import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

@Service
@AllArgsConstructor
public class OperationTypeService {

    private final OperationTypeRepository operationTypeRepository;

    public List<OperationTypeEntity> getOperationTypes() {

        return operationTypeRepository.findAll();
    }

    public OperationTypeEntity getOperationType(Long id){
        return this.operationTypeRepository.findById(id)
                .orElseThrow(() -> new IdNotFoundException("Operation Type", id));
    }

    public OperationTypeEntity addOperationType(java.lang.String name){
        if (validateName(name))
            throw new IllegalArgumentException("The name '" + name + "' is not appropriate");

        if (ifNameTaken(StringUtils.capitalize(name)))
            throw new IllegalArgumentException("Operation type with '" + name + "' name already exists");
        try {
            return operationTypeRepository.save(new OperationTypeEntity(StringUtils.capitalize(name)));
        } catch (RuntimeException e) {
            Throwable rootCause = Throwables.getRootCause(e);
            if (rootCause instanceof SQLException) {
                if ("23505".equals(((SQLException) rootCause).getSQLState())) {
                    throw new NotUniqueException("Operation type", "name", name);
                }
            }
            throw new RuntimeException(e);
        }
    }

    public OperationTypeEntity updateOperationType(Long id, java.lang.String name){
        Optional<OperationTypeEntity> operationTypeEntity = operationTypeRepository.findById(id);

        if (operationTypeEntity.isEmpty())
            throw new IdNotFoundException("Operation", id);

        if (validateName(name))
            throw new IllegalArgumentException("The name '" + name + "' is not appropriate");

        if (ifNameTaken(name))
            throw new IllegalArgumentException("Status with '" + name + "' name already exists");


        try {
            operationTypeEntity.get().setName(StringUtils.capitalize(name));
            return this.operationTypeRepository.save(operationTypeEntity.get());
        } catch (RuntimeException e) {
            Throwable rootCause = com.google.common.base.Throwables.getRootCause(e);
            if (rootCause instanceof SQLException) {
                if ("23505".equals(((SQLException) rootCause).getSQLState())) {
                    throw new NotUniqueException("Status", "name", StringUtils.capitalize(name));
                }
            }
            throw new RuntimeException(e);
        }
    }

    public void deleteOperationType(Long id) {
        try {
            this.operationTypeRepository.deleteById(id);
        } catch (RuntimeException ignored) {
            throw new IdNotFoundException("Status", id);
        }
    }

    public boolean ifNameTaken(java.lang.String name) {
        Optional<OperationTypeEntity> foundByName = operationTypeRepository.findStatusEntityByName(StringUtils.capitalize(name));
        return foundByName.isPresent();
    }

    // TODO: 25.05.2021 I CAN ADD A NAME VALIDATOR CLASS OR STH
    public boolean validateName(java.lang.String name) {
        return name == null || name.length() <= 0 || name.length() > 50 || !onlyLettersSpaces(name);
    }

    public static boolean onlyLettersSpaces(java.lang.String s) {
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if (Character.isLetter(ch) || ch == ' ') {
                continue;
            }
            return false;
        }
        return s.charAt(s.length() - 1) != ' ';
    }
}
