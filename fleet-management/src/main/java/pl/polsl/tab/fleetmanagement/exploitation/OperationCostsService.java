package pl.polsl.tab.fleetmanagement.exploitation;

import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@AllArgsConstructor
public class OperationCostsService {

    private final OperationCostsRepository operationCostsRepository;

    public List<OperationCostsDTO> getOperationCosts() {

        List<OperationCostsDTO> operationCostsDTOs = new ArrayList<>();
        List<OperationCostsEntity> operationCostsEntities = new ArrayList<>(operationCostsRepository.findAll());

//        for (OperationCostsEntity operationCostsEntity : operationCostsEntities) {
//            operationCostsDTOs.add(new OperationCostsDTO(
//                    operationCostsEntity.getDate(), operationCostsEntity.getPrice(),
//                    operationCostsEntity.getDescription(), operationCostsEntity.getVehiclesByVehiclesId(),
//                    operationCostsEntity.getOperationTypeByOperationTypeId(),
//                    operationCostsEntity.getVehicleRentingsByVehicleRentingsId(), operationCostsEntity.getKeepingId()));
//        }

//        return operationCostsDTOs;
        return null;

    }

    public Optional<OperationCostsDTO> getOperationCost(Long id) {
        Optional<OperationCostsEntity> operationCostsEntity = operationCostsRepository.findById(id);

//        if (operationCostsEntity.isPresent()) {
//            OperationCostsDTO operationCostsDTO = new OperationCostsDTO(
//                    operationCostsEntity.get().getDate(), operationCostsEntity.get().getPrice(),
//                    operationCostsEntity.get().getDescription(), operationCostsEntity.get().getVehiclesByVehiclesId(),
//                    operationCostsEntity.get().getOperationTypeByOperationTypeId(),
//                    operationCostsEntity.get().getVehicleRentingsByVehicleRentingsId(), operationCostsEntity.get().getKeepingId());

//            return Optional.of(operationCostsDTO);
//        }

        return Optional.empty();
    }

    public OperationCostsEntity addOperationCost(OperationCostsDTO operationCostsDTO) {
        return operationCostsRepository.save(
                new OperationCostsEntity(operationCostsDTO.getDate(), operationCostsDTO.getPrice(), operationCostsDTO.getDescription(),
                        operationCostsDTO.getVehicle().getId(), operationCostsDTO.getOperationType().getId(),
                        operationCostsDTO.getVehicleRenting().getId(), operationCostsDTO.getKeepingId()));
    }

    public Optional<OperationCostsDTO> updateOperationCost(Long id, OperationCostsDTO operationCostsDTO) {
        Optional<OperationCostsEntity> operationCostsEntity = operationCostsRepository.findById(id);

//        if (operationCostsEntity.isPresent()) {
//            operationCostsEntity.get().setDate(operationCostsDTO.getDate());
//            operationCostsEntity.get().setPrice(operationCostsDTO.getPrice());
//            operationCostsEntity.get().setDescription(operationCostsDTO.getDescription());
//            operationCostsEntity.get().setVehiclesId((int) operationCostsDTO.getVehicle().getId());
//            operationCostsEntity.get().setOperationTypeId((int) operationCostsDTO.getOperationType().getId());
//            operationCostsEntity.get().setVehicleRentingsId((int) operationCostsDTO.getVehicleRenting().getId());
//            operationCostsEntity.get().setKeepingId(operationCostsDTO.getKeepingId());
//
//            operationCostsRepository.save(operationCostsEntity.get());
//
//            return Optional.of(new OperationCostsDTO(operationCostsEntity.get().getDate(), operationCostsEntity.get().getPrice(),
//                    operationCostsEntity.get().getDescription(), operationCostsEntity.get().getVehiclesByVehiclesId(),
//                    operationCostsEntity.get().getOperationTypeByOperationTypeId(),
//                    operationCostsEntity.get().getVehicleRentingsByVehicleRentingsId(), operationCostsEntity.get().getKeepingId()));
//
//        }
        return Optional.empty();
    }

    public Optional<OperationCostsDTO> deleteOperationCost(Long id) {
        Optional<OperationCostsEntity> operationCostsEntity = operationCostsRepository.findById(id);

//        if (operationCostsEntity.isPresent()) {
//            operationCostsRepository.deleteById(id);
//            OperationCostsDTO operationCostsDTO = new OperationCostsDTO(
//                    operationCostsEntity.get().getDate(), operationCostsEntity.get().getPrice(),
//                    operationCostsEntity.get().getDescription(), operationCostsEntity.get().getVehiclesByVehiclesId(),
//                    operationCostsEntity.get().getOperationTypeByOperationTypeId(),
//                    operationCostsEntity.get().getVehicleRentingsByVehicleRentingsId(), operationCostsEntity.get().getKeepingId());
//
//            return Optional.of(operationCostsDTO);
//        }
        return Optional.empty();
    }
}
