package pl.polsl.tab.fleetmanagement.exploitation.type;

import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import pl.polsl.tab.fleetmanagement.vehiclepurpose.PurposeDTO;
import pl.polsl.tab.fleetmanagement.vehiclepurpose.PurposesEntity;

import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

@RestController
@AllArgsConstructor
@RequestMapping(path = "/operations/types")
public class OperationTypeController {

    private final OperationTypeService operationTypeService;

    @GetMapping
    public List<OperationTypeDTO> getOperationsTypes(){
        return operationTypeService.getOperationTypes();
    }

    @GetMapping(path = "/{id}")
    public ResponseEntity<OperationTypeDTO> getOperationType(@PathVariable Long id){

        Optional<OperationTypeDTO> response = operationTypeService.getOperationType(id);

        return response
                .map(operationTypeEntity -> ResponseEntity.status(HttpStatus.OK).body(response.get()))
                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(null));

    }

    @PostMapping("vehicles/purposes")
    public ResponseEntity<String> addOperationType(@RequestBody String name) {
        try {
            OperationTypeEntity response = operationTypeService.addOperationType(name);
            return ResponseEntity.status(HttpStatus.CREATED).body(name);
        } catch (RuntimeException  e) {
            Throwable rootCause = com.google.common.base.Throwables.getRootCause(e);

            if (rootCause instanceof SQLException) {
                if ("23505".equals(((SQLException) rootCause).getSQLState())) {
                    return ResponseEntity.status(HttpStatus.CONFLICT).body(null);
                }
            }

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    @PutMapping("/{id}")
    public ResponseEntity<OperationTypeDTO> updateOperationType(@PathVariable Long id, @RequestBody OperationTypeDTO operationTypeDTO) {
        Optional<OperationTypeDTO> response = operationTypeService.updateOperationType(id, operationTypeDTO);

        return response
                .map(purposesEntity -> ResponseEntity.status(HttpStatus.OK).body(response.get()))
                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(null));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<OperationTypeDTO> deletePurpose(@PathVariable Long id) {
        Optional<OperationTypeDTO> response = operationTypeService.deleteOperationType(id);

        return response
                .map(purposesEntity -> ResponseEntity.status(HttpStatus.OK).body(response.get()))
                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(null));
    }

}
