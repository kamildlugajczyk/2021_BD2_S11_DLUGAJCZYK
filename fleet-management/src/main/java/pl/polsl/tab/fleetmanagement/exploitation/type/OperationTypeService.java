package pl.polsl.tab.fleetmanagement.exploitation.type;

import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import pl.polsl.tab.fleetmanagement.vehiclepurpose.PurposeDTO;
import pl.polsl.tab.fleetmanagement.vehiclepurpose.PurposesEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Service
@AllArgsConstructor
public class OperationTypeService {

    private final OperationTypeRepository operationTypeRepository;

    public List<OperationTypeDTO> getOperationTypes() {

        List<OperationTypeDTO> operationTypeDTOs = new ArrayList<>();
        List<OperationTypeEntity> operationTypeEntities = new ArrayList<>(operationTypeRepository.findAll());

        for(OperationTypeEntity operationTypeEntity : operationTypeEntities){
            operationTypeDTOs.add(new OperationTypeDTO(operationTypeEntity.getId(), operationTypeEntity.getName()));
        }

        return operationTypeDTOs;
    }

    public Optional<OperationTypeDTO> getOperationType(Long id){
        Optional<OperationTypeEntity> operationTypeEntity = operationTypeRepository.findById(id);

        if(operationTypeEntity.isPresent()){
            OperationTypeDTO operationTypeDTO = new OperationTypeDTO(
                    operationTypeEntity.get().getId(), operationTypeEntity.get().getName());

            return Optional.of(operationTypeDTO);
        }

        return Optional.empty();
    }

    public OperationTypeEntity addOperationType(String name){
        return operationTypeRepository.save(new OperationTypeEntity(name));
    }

    public Optional<OperationTypeDTO> updateOperationType(Long id, OperationTypeDTO operationTypeDTO){
        Optional<OperationTypeEntity> operationTypeEntity = operationTypeRepository.findById(id);

        if(operationTypeEntity.isPresent()){
            if(operationTypeDTO.getName() != null && operationTypeDTO.getName().length() > 0 &&
                    !Objects.equals(operationTypeEntity.get().getName(), operationTypeDTO.getName())){

                operationTypeEntity.get().setName(operationTypeDTO.getName());
                operationTypeRepository.save(operationTypeEntity.get());

                return Optional.of(new OperationTypeDTO(
                        operationTypeEntity.get().getId(), operationTypeEntity.get().getName()));

            }
        }
        return Optional.empty();
    }

    public Optional<OperationTypeDTO> deleteOperationType(Long id) {
        Optional<OperationTypeEntity> operationTypeEntity = operationTypeRepository.findById(id);

        if (operationTypeEntity.isPresent()) {
            operationTypeRepository.deleteById(id);
            return Optional.of(new OperationTypeDTO(
                    operationTypeEntity.get().getId(), operationTypeEntity.get().getName()));
        }
        return Optional.empty();
    }

}
