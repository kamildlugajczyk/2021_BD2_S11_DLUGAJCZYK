package pl.polsl.tab.fleetmanagement.exploitation;

import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

@RestController
@AllArgsConstructor
@RequestMapping(path = "/operations")
public class OperationCostsController {

    private final OperationCostsService operationCostsService;

    @GetMapping
    public List<OperationCostsDTO> getOperationsCosts() {
        return operationCostsService.getOperationCosts();
    }

    @GetMapping(path = "/{id}")
    public ResponseEntity<OperationCostsDTO> getOperationCost(@PathVariable Long id) {

        Optional<OperationCostsDTO> response = operationCostsService.getOperationCost(id);

        return response
                .map(operationTypeEntity -> ResponseEntity.status(HttpStatus.OK).body(response.get()))
                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(null));

    }

    @PostMapping
    public ResponseEntity<OperationCostsDTO> addOperationCost(@RequestBody OperationCostsDTO operationCostsDTO) {
        try {
            OperationCostsEntity response = operationCostsService.addOperationCost(operationCostsDTO);
            return ResponseEntity.status(HttpStatus.CREATED).body(operationCostsDTO);
        } catch (RuntimeException e) {
            Throwable rootCause = com.google.common.base.Throwables.getRootCause(e);

            if (rootCause instanceof SQLException) {
                if ("23505".equals(((SQLException) rootCause).getSQLState())) {
                    return ResponseEntity.status(HttpStatus.CONFLICT).body(null);
                }
            }

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    @PutMapping("/{id}")
    public ResponseEntity<OperationCostsDTO> updateOperationCost(@PathVariable Long id, @RequestBody OperationCostsDTO operationCostsDTO) {
        Optional<OperationCostsDTO> response = operationCostsService.updateOperationCost(id, operationCostsDTO);

        return response
                .map(purposesEntity -> ResponseEntity.status(HttpStatus.OK).body(response.get()))
                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(null));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<OperationCostsDTO> deleteOperationCost(@PathVariable Long id) {
        Optional<OperationCostsDTO> response = operationCostsService.deleteOperationCost(id);

        return response
                .map(purposesEntity -> ResponseEntity.status(HttpStatus.OK).body(response.get()))
                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(null));
    }
}
